name: KAIROS CI

on:
  workflow_dispatch: {}         # ручной запуск кнопкой
  push:                         # автозапуск на коммиты в main по важным путям
    branches: [ main ]
    paths:
      - '.github/workflows/kairos-ci.yml'
      - '08-agents/**'
      - 'schemas/**'
      - 'pipelines/**'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:                 # автозапуск на PR в main
    branches: [ main ]
    paths:
      - '.github/workflows/kairos-ci.yml'
      - '08-agents/**'
      - 'schemas/**'
      - 'pipelines/**'
      - 'requirements.txt'
      - 'pyproject.toml'

permissions:
  contents: read

concurrency:
  group: kairos-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  kairos:
    name: KAIROS CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUTF8: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show tree
        shell: bash
        run: |
          echo "::group::tree-root"; ls -la; echo "::endgroup::"
          echo "::group::tree-08-agents"; ls -la 08-agents || true; echo "::endgroup::"
          echo "::group::tree-KAIROS"; ls -la 08-agents/KAIROS || true; echo "::endgroup::"

      # Строгая проверка наличия ключевых путей
      - name: Sanity verify paths (strict)
        shell: bash
        run: |
          set -euo pipefail
          for p in \
            "08-agents/KAIROS/.pre-commit-config.yaml" \
            "08-agents/KAIROS/Makefile" \
            "08-agents/KAIROS/scripts/json_schema_check.py" \
            "08-agents/KAIROS/scripts/nr_fm.py"
          do
            if [ -f "$p" ]; then
              echo "OK $p"
            else
              echo "::error::MISS $p"; exit 1
            fi
          done

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Если есть requirements/pyproject — ставим зависимости; иначе просто пропускаем
      - name: Install dependencies (if present)
        if: ${{ hashFiles('**/requirements.txt', '**/pyproject.toml') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install -e .
          fi
          python - <<'PY'
          import jsonschema, yaml
          print("jsonschema =", jsonschema.__version__)
          print("PyYAML    =", yaml.__version__)
          PY

      - name: Dependencies not found — skip install
        if: ${{ hashFiles('**/requirements.txt', '**/pyproject.toml') == '' }}
        run: echo "No requirements.txt / pyproject.toml — skipping dependency install."

      # Самопроверка схемы: валидность JSON Schema (строго)
      - name: Schema self-check (strict)
        if: ${{ hashFiles('08-agents/KAIROS/schemas/frontmatter.schema.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, jsonschema, sys
          p = '08-agents/KAIROS/schemas/frontmatter.schema.json'
          with open(p,'r',encoding='utf-8') as f:
              schema = json.load(f)
          jsonschema.Draft202012Validator.check_schema(schema)
          print("schema OK:", p)
          PY

      # Проверка фикстур фронтматтера через наш скрипт (если фикстуры есть)
      - name: Fixture validate (frontmatter, if present)
        if: ${{ hashFiles('08-agents/KAIROS/tests/fixtures/frontmatter/good/*.json') != '' || hashFiles('08-agents/KAIROS/tests/fixtures/frontmatter/bad/*.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          python 08-agents/KAIROS/scripts/nr_fm.py \
            --schema 08-agents/KAIROS/schemas/frontmatter.schema.json \
            --base   08-agents/KAIROS/tests/fixtures/frontmatter

      # Если имеется pipelines/fm_validate.py — запустим как интеграционный чекап
      - name: fm_validate pipeline (if present)
        if: ${{ hashFiles('pipelines/fm_validate.py') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          python pipelines/fm_validate.py

      # Если в Makefile есть цель ci-validate — прогоняем её
      - name: Make ci-validate (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f 08-agents/KAIROS/Makefile ]; then
            if grep -qE '^\s*ci-validate\s*:' 08-agents/KAIROS/Makefile; then
              make -C 08-agents/KAIROS ci-validate
            else
              echo "No 'ci-validate' target — skipping."
            fi
          else
            echo "Makefile not found — skipping."
          fi
